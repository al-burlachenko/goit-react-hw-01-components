{"version":3,"sources":["components/Statistics/Statistics.styled.jsx","components/Statistics/Statistics.jsx","utils/colorRandomizer.js","components/Profile/Profile.styled.jsx","components/Profile/Profile.jsx","components/FriendList/FriendList.styled.jsx","components/FriendList/FriendList.jsx","components/TransactionHistory/TransactionHistory.styled.jsx","components/TransactionHistory/TransactionHistory.jsx","components/App/App.styled.jsx","components/App/App.jsx","reportWebVitals.js","index.js"],"names":["StatisticsSection","styled","section","Title","h2","StatList","ul","Item","li","Label","span","Percentage","Statistics","stats","title","map","stat","style","backgroundColor","Math","random","toString","substring","toUpperCase","label","percentage","id","ProfileContatner","div","Description","Avatar","img","Name","p","Tag","Location","Stats","Items","Quantity","Profile","props","src","avatar","alt","username","tag","location","followers","views","likes","List","Status","statusType","FriendList","friends","friend","isOnline","width","name","TransactionContainer","table","TransactionHeader","th","TransactionData","td","TransactionRow","tr","TransactionHistory","items","item","type","amount","currency","Container","App","userInfo","data","transactions","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.77e7e70d.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const StatisticsSection = styled.section`\r\n  margin-bottom: 20px;\r\n`;\r\nexport const Title = styled.h2`\r\n  text-align: center;\r\n  margin: 0px;\r\n`;\r\nexport const StatList = styled.ul`\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\nexport const Item = styled.li`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-basis: 100%;\r\n\r\n  padding: 10px;\r\n`;\r\nexport const Label = styled.span`\r\n  text-align: center;\r\n  margin-bottom: 10px;\r\n`;\r\nexport const Percentage = styled.span`\r\n  text-align: center;\r\n  font-size: larger;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport {\r\n  StatisticsSection,\r\n  Title,\r\n  StatList,\r\n  Item,\r\n  Label,\r\n  Percentage,\r\n} from './Statistics.styled';\r\nimport randomColor from '../../utils/colorRandomizer';\r\n\r\nexport default function Statistics({ stats, title }) {\r\n  return (\r\n    <StatisticsSection>\r\n      <Title>{title}</Title>\r\n\r\n      <StatList>\r\n        {stats.map(stat => (\r\n          <Item style={{ backgroundColor: randomColor() }} key={stat.id}>\r\n            <Label>{stat.label}</Label>\r\n            <Percentage>{stat.percentage} %</Percentage>\r\n          </Item>\r\n        ))}\r\n      </StatList>\r\n    </StatisticsSection>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  stats: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      label: PropTypes.string,\r\n      percentage: PropTypes.number,\r\n      id: PropTypes.string,\r\n    }).isRequired,\r\n  ),\r\n  title: PropTypes.string,\r\n};\r\n","export default function randomColor() {\n  return (\n    '#' + (Math.random().toString(16) + '000000').substring(2, 8).toUpperCase()\n  );\n}\n","import styled from '@emotion/styled';\r\n\r\nexport const ProfileContatner = styled.div`\r\n  width: 300px;\r\n  padding: 10px 0px 0px 0px;\r\n  margin-bottom: 20px;\r\n\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n\r\n  -webkit-box-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2);\r\n  -moz-box-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2);\r\n  box-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2);\r\n`;\r\nexport const Description = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\nexport const Avatar = styled.img`\r\n  width: 200px;\r\n  border-radius: 50% 50%;\r\n`;\r\nexport const Name = styled.p`\r\n  margin-bottom: 5px;\r\n`;\r\nexport const Tag = styled.p`\r\n  margin-bottom: 5px;\r\n`;\r\nexport const Location = styled.p`\r\n  margin-bottom: 20px;\r\n`;\r\nexport const Stats = styled.ul`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  border-top: 1px solid rgba(34, 60, 80, 0.2);\r\n`;\r\nexport const Items = styled.li`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-basis: calc(100% / 3);\r\n  padding: 10px;\r\n  border-right: 1px solid rgba(34, 60, 80, 0.2);\r\n  &: last-of-type {\r\n    border-right: none;\r\n  }\r\n`;\r\nexport const Label = styled.span`\r\n  text-align: center;\r\n`;\r\nexport const Quantity = styled.span`\r\n  text-align: center;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport {\r\n  ProfileContatner,\r\n  Description,\r\n  Avatar,\r\n  Name,\r\n  Tag,\r\n  Location,\r\n  Stats,\r\n  Items,\r\n  Label,\r\n  Quantity,\r\n} from './Profile.styled';\r\n\r\nexport default function Profile(props) {\r\n  return (\r\n    <ProfileContatner>\r\n      <Description>\r\n        <Avatar src={props.avatar} alt=\"User avatar\" />\r\n        <Name>{props.username}</Name>\r\n        <Tag>@{props.tag}</Tag>\r\n        <Location>{props.location}</Location>\r\n      </Description>\r\n\r\n      <Stats>\r\n        <Items>\r\n          <Label>Followers</Label>\r\n          <Quantity>{props.followers}</Quantity>\r\n        </Items>\r\n        <Items>\r\n          <Label>Views</Label>\r\n          <Quantity>{props.views}</Quantity>\r\n        </Items>\r\n        <Items>\r\n          <Label>Likes</Label>\r\n          <Quantity>{props.likes}</Quantity>\r\n        </Items>\r\n      </Stats>\r\n    </ProfileContatner>\r\n  );\r\n}\r\n\r\nProfile.propTypes = {\r\n  username: PropTypes.string.isRequired,\r\n  tag: PropTypes.string.isRequired,\r\n  location: PropTypes.string.isRequired,\r\n  avatar: PropTypes.string.isRequired,\r\n\r\n  stats: PropTypes.shape({\r\n    followers: PropTypes.number.isRequired,\r\n    views: PropTypes.number.isRequired,\r\n    likes: PropTypes.number.isRequired,\r\n  }),\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const List = styled.ul`\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  margin-bottom: 10px;\r\n\r\n  padding: 10px;\r\n\r\n  -webkit-box-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2);\r\n  -moz-box-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2);\r\n  box-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2);\r\n`;\r\n\r\nexport const Avatar = styled.img`\r\n  border-radius: 10px;\r\n  margin-left: 20px;\r\n`;\r\n\r\nexport const Name = styled.p`\r\n  margin-left: 20px;\r\n  font-weight: bolder;\r\n`;\r\n\r\nexport const Status = styled.span`\r\n  border-radius: 100%;\r\n  width: 20px;\r\n  height: 20px;\r\n  background-color: ${({ statusType }) => {\r\n    if (statusType) {\r\n      return 'rgb(0, 131, 0)';\r\n    } else return 'rgb(255, 0, 0)';\r\n  }};\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { List, Item, Avatar, Name, Status } from './FriendList.styled';\r\n\r\nexport default function FriendList({ friends }) {\r\n  return (\r\n    <List>\r\n      {friends.map(friend => (\r\n        <Item key={friend.id}>\r\n          <Status statusType={friend.isOnline}></Status>\r\n          <Avatar src={friend.avatar} alt=\"User avatar\" width=\"48\" />\r\n          <Name>{friend.name}</Name>\r\n        </Item>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nFriendList.propTypes = {\r\n  id: PropTypes.string,\r\n  isOnline: PropTypes.bool,\r\n  avatar: PropTypes.string,\r\n  name: PropTypes.string,\r\n};\r\n","import styled from '@emotion/styled';\r\n\r\nexport const TransactionContainer = styled.table`\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n\r\n  -webkit-box-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2);\r\n  -moz-box-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2);\r\n  box-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2);\r\n`;\r\n\r\nexport const TransactionHeader = styled.th`\r\n  background-color: rgb(17, 136, 172);\r\n  padding: 10px;\r\n\r\n  text-align: center;\r\n\r\n  &:nth-of-type(2n) {\r\n    border-left: solid 1px #eee7e7;\r\n    border-right: solid 1px #eee7e7;\r\n  }\r\n`;\r\n\r\nexport const TransactionData = styled.td`\r\n  padding: 10px;\r\n\r\n  text-align: center;\r\n\r\n  &:nth-of-type(2n) {\r\n    border-left: solid 1px #eee7e7;\r\n    border-right: solid 1px #eee7e7;\r\n  }\r\n`;\r\n\r\nexport const TransactionRow = styled.tr`\r\n  &: nth-of-type(2n) {\r\n    background-color: rgb(240, 240, 240);\r\n  }\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport {\r\n  TransactionContainer,\r\n  TransactionHeader,\r\n  TransactionData,\r\n  TransactionRow,\r\n} from './TransactionHistory.styled';\r\n\r\nexport default function TransactionHistory({ items }) {\r\n  return (\r\n    <TransactionContainer>\r\n      <thead>\r\n        <tr>\r\n          <TransactionHeader>Type</TransactionHeader>\r\n          <TransactionHeader>Amount</TransactionHeader>\r\n          <TransactionHeader>Currency</TransactionHeader>\r\n        </tr>\r\n      </thead>\r\n\r\n      <tbody>\r\n        {items.map(item => (\r\n          <TransactionRow key={item.id}>\r\n            <TransactionData>{item.type}</TransactionData>\r\n            <TransactionData>{item.amount}</TransactionData>\r\n            <TransactionData>{item.currency}</TransactionData>\r\n          </TransactionRow>\r\n        ))}\r\n      </tbody>\r\n    </TransactionContainer>\r\n  );\r\n}\r\n\r\nTransactionHistory.propTypes = {\r\n  id: PropTypes.string,\r\n  type: PropTypes.string,\r\n  amount: PropTypes.string,\r\n  currency: PropTypes.string,\r\n};\r\n","import styled from '@emotion/styled';\r\nexport const Container = styled.div`\r\n  padding: 50px;\r\n`;\r\n","import Statistics from '../Statistics/Statistics';\nimport Profile from '../Profile/Profile';\nimport FriendList from '../FriendList/FriendList';\nimport TransactionHistory from '../TransactionHistory/TransactionHistory';\n\nimport userInfo from '../../data/user.json';\nimport data from '../../data/data.json';\nimport friends from '../../data/friends.json';\nimport transactions from '../../data/transactions.json';\n\nimport { Container } from './App.styled';\n\nfunction App() {\n  return (\n    <Container>\n      <Profile\n        username={userInfo.username}\n        tag={userInfo.tag}\n        location={userInfo.location}\n        avatar={userInfo.avatar}\n        stats={userInfo.stats}\n        followers={userInfo.stats.followers}\n        views={userInfo.stats.views}\n        likes={userInfo.stats.likes}\n      />\n      <Statistics title=\"Upload stats\" stats={data} />\n      <Statistics stats={data} />\n      <FriendList friends={friends} />\n      <TransactionHistory items={transactions} />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport App from './components/App/App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}